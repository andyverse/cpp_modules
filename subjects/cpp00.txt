C++ — это язык программирования общего назначения, созданный Бьерном Страуструпом как расширение языка программирования C или «C with Classes» (источник: Википедия).
Цель этих модулей — познакомить вас с объектно-ориентированным программированием.
Это будет отправной точкой вашего путешествия по C++. Многие языки рекомендуются для изучения ООП. Мы решили выбрать C++, так как он является производным от вашего старого знакомого C.
Поскольку это сложный язык, и для простоты ваш код будет соответствовать стандарту C++98.
Мы знаем, что современный C++ сильно отличается во многих аспектах. Так что, если вы хотите стать опытным разработчиком C++, вам решать, идти ли дальше после 42 Common Core!
Шаг за шагом вы будете открывать для себя новые концепции. Упражнения постепенно усложняются.

				Основные правила
		Компиляция
• Скомпилируйте свой код с помощью C++ и флагов -Wall -Wextra -Werror
• Ваш код все равно должен компилироваться, если вы добавите флаг -std=c++98 Форматирование и соглашения об именах
• Каталоги упражнений будут называться следующим образом: ex00, ex01, ..., exn
• Назовите ваши файлы, классы, функции, функции-члены и атрибуты, как это требуется в рекомендациях.
• Пишите имена классов в формате UpperCamelCase. Файлы, содержащие код класса, всегда будут называться в соответствии с именем класса. Например:
ClassName.hpp/ClassName.h, ClassName.cpp или ClassName.tpp. Затем, если у вас есть заголовочный файл, содержащий определение класса «BrickWall», обозначающего кирпичную стену, его имя будет BrickWall.hpp.
• Если не указано иное, каждое выходное сообщение должно заканчиваться символом новой строки и выводиться на стандартный вывод.
• До свидания, Норминетт! В модулях C++ не применяется стиль кодирования. Вы можете следить за своим любимым. Но имейте в виду, что код, который не могут понять ваши коллеги-оценщики, — это код, который они не могут оценить. Старайтесь писать чистый и читаемый код.

Разрешено/Запрещено

Вы больше не кодируете на C. Время С++! Следовательно:
• Вам разрешено использовать почти все из стандартной библиотеки. Таким образом, вместо того, чтобы придерживаться того, что вы уже знаете, было бы разумно использовать как можно больше C++-версий функций C, к которым вы привыкли.
• Однако вы не можете использовать никакую другую внешнюю библиотеку. Это означает, что C++11 (и производные формы) и библиотеки Boost запрещены. Также запрещены следующие функции: *printf(), *alloc() и free(). Если вы их используете, ваша оценка будет 0 и все.
Обратите внимание, что если явно не указано иное, использование пространства имен <ns_name> и дружественных ключевых слов запрещено. В противном случае ваша оценка будет -42.
• Вам разрешено использовать STL только в Модуле 08. Это значит: нет
Контейнеры (вектор/список/карта/и т. д.) и никаких алгоритмов (все, что требует включения заголовка <algorithm>) до тех пор. В противном случае ваша оценка будет -42.

Несколько требований к дизайну

• Утечка памяти происходит и в C++. Когда вы выделяете память (используя ключевое слово new), вы должны избегать утечек памяти.
• Начиная с Модуля 02 и заканчивая Модулем 08, ваши классы должны быть разработаны в православной канонической форме, за исключением случаев, когда прямо указано иное.
• Любая реализация функции, помещенная в заголовочный файл (кроме шаблонов функций), означает 0 для упражнения.
• Вы должны иметь возможность использовать каждый из ваших заголовков независимо от других. Таким образом, они должны включать все необходимые им зависимости. Однако вы должны избежать проблемы двойного включения, добавив защиту включения. В противном случае ваша оценка будет 0.

Прочти меня

• При необходимости вы можете добавить несколько дополнительных файлов (например, для разделения кода). Поскольку эти назначения не проверяются программой, не стесняйтесь делать это, пока вы сдаете обязательные файлы.
• Иногда рекомендации упражнения кажутся короткими, но в примерах могут быть показаны требования, которые явно не прописаны в инструкциях.
• Полностью прочитайте каждый модуль перед началом! Действительно, сделай это.
• Клянусь Одином, клянусь Тором! Используй свой мозг!!!

	Вам придется реализовать много классов. Это может показаться утомительным,
	если только вы не умеете писать сценарии в своем любимом текстовом редакторе.

	Вам предоставляется определенная свобода для выполнения упражнений. Однако соблюдайте обязательные правила и не ленитесь. Вы бы пропустили много полезной информации! Не стесняйтесь читать о теоретических концепциях.


				Exercise 00: Megaphone

Turn-in directory:		ex00/
Files to turn in:		Makefile, megaphone.cpp
Forbidden functions:	None

Чтобы убедиться, что все проснулись, напишите программу, которая ведет себя
следующим образом:

$>./megaphone "shhhhh... I think the students are asleep..."
SHHHHH... I THINK THE STUDENTS ARE ASLEEP...
$>./megaphone Damnit " ! " "Sorry students, I thought this thing was off."
DAMNIT ! SORRY STUDENTS, I THOUGHT THIS THING WAS OFF.
$>./megaphone
* LOUD AND UNBEARABLE FEEDBACK NOISE *
$>

Решите упражнения в стиле C++.


				Exercise 01: My Awesome PhoneBook

Turn-in directory:		ex01/
Files to turn in:		Makefile, *.cpp, *.{h, hpp}
Forbidden functions:	None

Добро пожаловать в 80-е и их невероятные технологии! Напишите программу, которая ведет себя как дерьмовая потрясающая программа для работы с телефонной книгой.

Вы должны реализовать два класса:

• Телефонная книга
	◦ Он имеет массив контактов.
	◦ Он может хранить до 8 контактов. Если пользователь попытается добавить 9-й контакт, замените самый старый новым.
	◦ Обратите внимание, что динамическое размещение запрещено.

• Контакт
	◦ Обозначает контакт из телефонной книги.

В вашем коде телефонная книга должна быть создана как экземпляр класса PhoneBook. То же самое и с контактами. Каждый из них должен быть создан как экземпляр класса Contact. Вы можете создавать классы по своему усмотрению, но имейте в виду, что все, что всегда будет использоваться внутри класса, является закрытым, а все, что может использоваться вне класса, является общедоступным.

При запуске программы телефонная книга пуста и пользователю предлагается ввести одну из трех команд. Программа принимает только ДОБАВИТЬ, ПОИСК и ВЫХОД.

• ДОБАВИТЬ: сохранить новый контакт
	◦ Если пользователь вводит эту команду, ему предлагается ввести информацию о новом контакте по одному полю за раз. После заполнения всех полей добавьте контакт в телефонную книгу.
	◦ Поля для контактов: имя, фамилия, псевдоним, номер телефона и самая темная тайна. Сохраненный контакт не может иметь пустых полей.

• ПОИСК: отображение определенного контакта
	◦ Отображение сохраненных контактов в виде списка из 4 столбцов: индекс, имя, фамилия и псевдоним.
	◦ Ширина каждого столбца должна составлять 10 символов. Их разделяет вертикальная черта ('|'). Текст должен быть выровнен по правому краю. Если текст длиннее столбца, он должен быть усечен, а последний отображаемый символ должен быть заменен точкой ('.').
	◦ Затем снова предложите пользователю указать индекс записи для отображения. Если индекс выходит за пределы диапазона или неверен, определите соответствующее поведение. В противном случае отобразите контактную информацию, по одному полю в строке.

• ВЫХОД
	◦ Программа завершает работу и контакты теряются навсегда!
	• Любой другой ввод отбрасывается.

После того, как команда была выполнена правильно, программа ожидает другую. Он останавливается, когда пользователь вводит EXIT.

Дайте соответствующее имя вашему исполняемому файлу.


				Exercise 02: The Job Of Your Dreams

Turn-in directory:		ex02/
Files to turn in:		Makefile, Account.cpp, Account.hpp, tests.cpp
Forbidden functions:	None

	Account.hpp,tests.cpp и файл журнала доступны для загрузки на
	внутреннюю страницу модуля.

Сегодня ваш первый день в GlobalBanksters United. После успешного прохождения рекрутинговых тестов (благодаря нескольким трюкам с Microsoft Office, которые показал вам друг), вы присоединились к команде разработчиков. Вы также знаете, что рекрутер был поражен тем, как быстро вы установили Adobe Reader. Это маленькое дополнение имело решающее значение и помогло вам победить все ваши
противники (они же другие претенденты): вы сделали это!

В любом случае, ваш менеджер только что дал вам кое-какую работу. Ваша первая задача — воссоздать потерянный файл. Что-то пошло не так, и исходный файл был удален по ошибке. К сожалению, ваши коллеги не знают, что такое Git, и используют USB-ключи для обмена кодом. В этот момент имеет смысл покинуть это место прямо сейчас. Однако вы решаете остаться. Вызов принят!

Ваши коллеги-разработчики дают вам кучу файлов. Компиляция test.cpp показывает, что отсутствует файл Account.cpp. К счастью, заголовочный файл Account.hpp сохранился. Существует также файл журнала. Возможно, вы могли бы использовать его, чтобы понять, как был реализован класс Account.

Вы начинаете воссоздавать файл Account.cpp. Всего за несколько минут вы напишете несколько строк на чистом, потрясающем C++. После пары неудачных компиляций ваша программа проходит тесты. Его вывод полностью совпадает с тем, что сохранен в файле журнала (за исключением временных меток, которые, очевидно, будут отличаться, поскольку тесты, сохраненные в файле журнала, были запущены до того, как вас наняли).

Чёрт, ты впечатляешь!

	Порядок вызова деструкторов может отличаться в зависимости от вашего компилятора/операционной системы. Таким образом, ваши деструкторы могут вызываться в обратном порядке.

	Вы можете пройти этот модуль, не выполняя упражнение 02.